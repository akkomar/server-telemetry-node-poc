// This will be generated by glean-parser
// FxA frontend uses "pings as events" approach

// This requires `uuid` library to be in the environment
const uuidv4 = require('uuid').v4;

const GLEAN_EVENT_MOZLOG_TYPE = 'glean-server-event';

class AccountsEventsServerEvent {
  /**
   * Record and submit a server event object.
   * Event is logged using provided loggingFunction.
   *
   * @param {Object} options - The options object.
   * @param {Function} options.loggingFunction - The logging function to use. It must accept two arguments: message type and message, and use mozlog for proper message formatting.
   * @param {string} options.applicationId - The application ID.
   * @param {string} options.appDisplayVersion - The application display version.
   * @param {string} options.channel - The channel.
   * @param {string} options.event_name - The event name.
   * @param {string} options.account_user_id_sha256 - The SHA-256 hash of the account user ID.
   * @param {string} options.relying_party_oauth_client_id - The OAuth client ID of the relying party.
   * @param {string} options.relying_party_service - The relying party service.
   */
  record({
    loggingFunction,
    applicationId,
    appDisplayVersion,
    channel,
    event_name,
    account_user_id_sha256,
    relying_party_oauth_client_id,
    relying_party_service,
  }) {
    let timestamp = new Date().toISOString();
    let eventPayload = {
      metrics: {
        string: {
          'event.name': event_name,
          'account.user_id_sha256': account_user_id_sha256,
          'relying_party.oauth_client_id': relying_party_oauth_client_id,
          'relying_party.service': relying_party_service,
        },
      },
      ping_info: {
        seq: 0, // this is required, however doesn't seem to be useful in server context
        start_time: timestamp,
        end_time: timestamp,
      },
      // `Unknown` fields below are required in the Glean schema, however they are not useful in server context
      client_info: {
        telemetry_sdk_build: 'glean-parser v. X.Y.Z',
        first_run_date: 'Unknown',
        os: 'Unknown',
        os_version: 'Unknown',
        architecture: 'Unknown',
        app_build: 'Unknown',
        app_display_version: appDisplayVersion,
        app_channel: channel,
      },
    };
    eventPayload = JSON.stringify(eventPayload);

    // This is the message structure that Decoder expects: https://github.com/mozilla/gcp-ingestion/pull/2400
    let ping = {
      document_namespace: applicationId,
      document_type: 'accounts-events',
      document_version: '1',
      document_id: uuidv4(),
      payload: eventPayload,
    };

    // this is similar to how FxA currently logs with mozlog: https://github.com/mozilla/fxa/blob/4c5c702a7fcbf6f8c6b1f175e9172cdd21471eac/packages/fxa-auth-server/lib/log.js#L289
    loggingFunction(GLEAN_EVENT_MOZLOG_TYPE, ping);
  }
}

module.exports = {
  accountsEventsEvent: new AccountsEventsServerEvent(),
};
